/* Escolhendo um Banco de Dados */
USE
	EMPRESA
GO


/* Criando uma Tabela */
CREATE TABLE PRODUTOS (
	IDPRODUTO INT IDENTITY PRIMARY KEY,
	NOME VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(30) NOT NULL,
	PRECO NUMERIC(10,2) NOT NULL
)
GO


CREATE TABLE HISTORICO (
	IDOPERACAO INT PRIMARY KEY IDENTITY,
	PRODUTO VARCHAR(50) NOT NULL,
	CATEGORIA VARCHAR(30) NOT NULL,
	PRECOANTIGO NUMERIC(10,2) NOT NULL,
	PRECONOVO NUMERIC(10,2) NOT NULL,
	DATA DATETIME,
	USUARIO VARCHAR(30),
	MENSAGEM VARCHAR(100)
)
GO


/* Inserindo Valores na Tabela */
INSERT INTO
	PRODUTOS
VALUES (
	'LIVRO SQL SERVER',
	'LIVROS',
	98.00
)


INSERT INTO
	PRODUTOS
VALUES (
	'LIVRO ORACLE',
	'LIVROS',
	50.00
)


INSERT INTO
	PRODUTOS
VALUES (
	'LICENÇA POWERCENTER',
	'SOFTWARES',
	45000.00
)


INSERT INTO
	PRODUTOS
VALUES (
	'NOTEBOOK I7',
	'COMPUTADORES',
	3150.00
)


INSERT INTO
	PRODUTOS
VALUES (
	'LIVRO BUSINESS INTELLIGENCE',
	'LIVROS',
	90.00
)
GO


/* Verificando o Usuário Logado no Banco de Dados */
SELECT
	SUSER_NAME()
GO


/* Criando uma Trigger - Data Manipulation Language */
CREATE TRIGGER
	TRG_ATUALIZA_PRECO
ON
	DBO.PRODUTOS
FOR
	UPDATE
AS
	DECLARE
		@IDPRODUTO INT
	DECLARE
		@PRODUTO VARCHAR(30)
	DECLARE
		@CATEGORIA VARCHAR(10)
	DECLARE
		@PRECO NUMERIC(10,2)
	DECLARE
		@PRECONOVO NUMERIC(10,2)
	DECLARE
		@DATA DATETIME
	DECLARE
		@USUARIO VARCHAR(30)
	DECLARE
		@ACAO VARCHAR(100)

	SELECT
		@IDPRODUTO = IDPRODUTO
	FROM
		INSERTED
	SELECT
		@PRODUTO = NOME
	FROM
		INSERTED
	SELECT
		@CATEGORIA = CATEGORIA
	FROM
		INSERTED
	SELECT
		@PRECO = PRECO
	FROM
		DELETED
	SELECT
		@PRECONOVO = PRECO
	FROM
		INSERTED

	SET
		@DATA = GETDATE()
	SET
		@USUARIO = SUSER_NAME()
	SET
		@ACAO = 'VALOR INSERIDO PELA TRIGGER TRG_ATUALIZA_PRECO'

	INSERT INTO HISTORICO (
		PRODUTO,
		CATEGORIA,
		PRECOANTIGO,
		PRECONOVO,
		DATA,
		USUARIO,
		MENSAGEM
	)
	VALUES (
		@PRODUTO,
		@CATEGORIA,
		@PRECO,
		@PRECONOVO,
		@DATA,
		@USUARIO,
		@ACAO
	)

	PRINT
		'TRIGGER EXECUTADA COM SUCESSO'
GO


/* Atualizando um Dado */
UPDATE
	PRODUTOS
SET
	PRECO = 100.00
WHERE
	IDPRODUTO = 1
GO


/* Selecionando Dado de uma Tabela */
SELECT
	*
FROM
	PRODUTOS
GO


SELECT
	*
FROM
	HISTORICO
GO


/* Atualizando um Dado */
UPDATE
	PRODUTOS
SET
	NOME = 'LIVRO C#'
WHERE
	IDPRODUTO = 1
GO


/* Apagando uma Trigger */
DROP TRIGGER
	TRG_ATUALIZA_PRECO
GO


/* Criando uma Trigger e Programando em uma Coluna - Data Manipulation Language */
CREATE TRIGGER
	TRG_ATUALIZA_PRECO
ON
	DBO.PRODUTOS
FOR
	UPDATE
AS
IF
	UPDATE(PRECO)
BEGIN
	DECLARE
		@IDPRODUTO INT
	DECLARE
		@PRODUTO VARCHAR(30)
	DECLARE
		@CATEGORIA VARCHAR(10)
	DECLARE
		@PRECO NUMERIC(10,2)
	DECLARE
		@PRECONOVO NUMERIC(10,2)
	DECLARE
		@DATA DATETIME
	DECLARE
		@USUARIO VARCHAR(30)
	DECLARE
		@ACAO VARCHAR(100)

	SELECT
		@IDPRODUTO = IDPRODUTO
	FROM
		INSERTED
	SELECT
		@PRODUTO = NOME
	FROM
		INSERTED
	SELECT
		@CATEGORIA = CATEGORIA
	FROM
		INSERTED
	SELECT
		@PRECO = PRECO
	FROM
		DELETED
	SELECT
		@PRECONOVO = PRECO
	FROM
		INSERTED

	SET
		@DATA = GETDATE()
	SET
		@USUARIO = SUSER_NAME()
	SET
		@ACAO = 'VALOR INSERIDO PELA TRIGGER TRG_ATUALIZA_PRECO'

	INSERT INTO HISTORICO (
		PRODUTO,
		CATEGORIA,
		PRECOANTIGO,
		PRECONOVO,
		DATA,
		USUARIO,
		MENSAGEM
	)
	VALUES (
		@PRODUTO,
		@CATEGORIA,
		@PRECO,
		@PRECONOVO,
		@DATA,
		@USUARIO,
		@ACAO
	)

	PRINT
		'TRIGGER EXECUTADA COM SUCESSO'
END
GO


/* Atualizando um Dado */
UPDATE
	PRODUTOS
SET
	PRECO = 300.00
WHERE
	IDPRODUTO = 2
GO


/* Selecionando da Tabela */
SELECT
	*
FROM
	HISTORICO
GO


/* Atualizando um Dado */
UPDATE
	PRODUTOS
SET
	NOME = 'LIVRO JAVA'
WHERE
	IDPRODUTO = 2
GO


/* Variáveis com Select */

SELECT
	10 + 10
GO


/* Criando uma Tabela */
CREATE TABLE RESULTADO (
	IDRESULTADO INT PRIMARY KEY IDENTITY,
	RESULTADO INT
)
GO


/* Inserindo Dados na Tabela */
INSERT INTO
	RESULTADO
VALUES (
	(SELECT
		10 + 10)
)
GO


/* Atribuindo Selects a Variáveis - Anônimo */
DECLARE
	@RESULTADO INT
	SET
		@RESULTADO = (SELECT 50 + 50)
	INSERT INTO
		RESULTADO
	VALUES (
		@RESULTADO
	)
	PRINT
		'VALOR INSERIDO NA TABELA: ' + CAST(@RESULTADO AS VARCHAR)
	GO



/* Criando uma Tabela */
CREATE TABLE EMPREGADO (
	IDEMP INT PRIMARY KEY IDENTITY,
	NOME VARCHAR(30),
	SALARIO MONEY,
	IDGERENTE INT
)
GO

/* Criando uma Constraint */
ALTER TABLE
	EMPREGADO
ADD CONSTRAINT
	FK_GERENTE
FOREIGN KEY
	(IDGERENTE)
REFERENCES
	EMPREGADO (IDEMP)
GO


/* Inserindo Valores na Tabela */
INSERT INTO
	EMPREGADO
VALUES (
	'CLARA',
	5000.00,
	NULL
)


INSERT INTO	
	EMPREGADO
VALUES (
	'CELIA',
	4000.00,
	1
)


INSERT INTO
	EMPREGADO
VALUES (
	'JOAO',
	4000.00,
	1
)
GO


/* Criando uma Tabela */
CREATE TABLE HIST_SALARIO (
	IDEMPREGADO INT,
	ANTIGOSAL MONEY,
	NOVOSAL MONEY,
	DATA DATETIME
)
GO


/* Criando uma Trigger */
CREATE TRIGGER
	TG_SALARIO
ON
	DBO.EMPREGADO
FOR
	UPDATE
AS
IF
	UPDATE(SALARIO)
BEGIN
	INSERT INTO
		HIST_SALARIO (
			IDEMPREGADO,
			ANTIGOSAL,
			NOVOSAL,
			DATA
		)
	SELECT
		D.IDEMP,
		D.SALARIO,
		I.SALARIO,
		GETDATE()
	FROM
		DELETED D,
		INSERTED I
	WHERE
		D.IDEMP = I.IDEMP
END
GO


/* Atualizando Dados da Tabela */
UPDATE
	EMPREGADO
SET
	SALARIO = SALARIO * 1.1
GO


/* Selecionando uma Tabela */
SELECT
	*
FROM
	HIST_SALARIO
GO


/* Criando uma Tabela */
CREATE TABLE SALARIO_RANGE (
	MINSAL MONEY,
	MAXSAL MONEY
)
GO


/* Inserindo Dados na Tabela */
INSERT INTO
	SALARIO_RANGE
VALUES (
	3000.00,
	6000.00
)
GO


/* Criando uma Trigger */
CREATE TRIGGER
	TG_RANGE
ON
	DBO.EMPREGADO
FOR 
	INSERT,
	UPDATE
AS
	DECLARE
		@MINSAL MONEY,
		@MAXSAL MONEY,
		@ATUALSAL MONEY

	SELECT
		@MINSAL = @MINSAL,
		@MAXSAL = @MAXSAL
	FROM
		SALARIO_RANGE

	SELECT
		@ATUALSAL = I.SALARIO
	FROM
		INSERTED I

	IF
		(@ATUALSAL < @MINSAL)
	BEGIN
		RAISERROR('SALARIO MENOR QUE O PISO', 16,1)
		ROLLBACK TRANSACTION
	END

	IF
		(@ATUALSAL > @MAXSAL)
	BEGIN
		RAISERROR('SALARIO MAIOR QUE O TETO', 16,1)
		ROLLBACK TRANSACTION
	END
GO


/* Atualizando Dado */
UPDATE
	EMPREGADO
SET
	SALARIO = 9000.00
WHERE
	IDEMP = 1
GO


UPDATE
	EMPREGADO
SET
	SALARIO = 1000.00
WHERE
	IDEMP = 1
GO


/* Verificando o Texto da Trigger */
SP_HELPTEXT
	TG_RANGE
GO